# -*- coding: utf-8 -*-
"""LVADUSR160_Final Assessment_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Tk1zyRGUSRCLiOY1l02mSv3-HYn1whK
"""

import pandas as pd

df_species = pd.read_csv('/content/penguins_classification.csv')

df_species.info()

df_species.isnull().sum()

df_species.head(2)

from matplotlib import pyplot as plt
df_species['flipper_length_mm'].plot(kind='hist', bins=20, title='flipper_length_mm')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df_species['bill_length_mm'].plot(kind='hist', bins=20, title='bill_length_mm')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df_species['bill_depth_mm'].plot(kind='hist', bins=20, title='bill_depth_mm')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df_species['body_mass_g'].plot(kind='hist', bins=20, title='body_mass_g')
plt.gca().spines[['top', 'right',]].set_visible(False)

duplicates = df_species.duplicated(keep=False)
df_species['dup_bool'] = duplicates
print(df_species[df_species['dup_bool'] == True].count())
df_species.drop('dup_bool',axis=1)
df_species.head(1)

from sklearn.preprocessing import LabelEncoder

lbl_enc = LabelEncoder()
df_species['species'] = lbl_enc.fit_transform(df_species['species'])
df_species['island'] = lbl_enc.fit_transform(df_species['island'])
df_species['year'] = lbl_enc.fit_transform(df_species['year'])

from sklearn.model_selection import train_test_split

x = df_species.drop(['bill_length_mm','body_mass_g'],axis=1)
y = df_species['body_mass_g']

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report

algos = ['Decision tree','Logistic','RandomForest', 'XGB']
accs=[]

dec_clf = DecisionTreeClassifier()
dec_clf.fit(X_train,y_train)
y_pred = dec_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Decision tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))

dec_clf = DecisionTreeClassifier()
dec_clf.fit(X_train,y_train)
y_pred = dec_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Decision tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))

RF_clf = RandomForestClassifier()
RF_clf.fit(X_train,y_train)
y_pred = RF_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("RandomForest  Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))

xgb_clf = xgb.XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
xgb_clf.fit(X_train, y_train)
y_pred = xgb_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("XGBoost Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))

#The Decision Tree classifier has the highest accuracy