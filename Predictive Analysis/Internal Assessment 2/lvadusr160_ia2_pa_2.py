# -*- coding: utf-8 -*-
"""LVADUSR160_IA2_PA_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vOM5LCSqhnTK9l9lMvApf8MjSLNsM4KR
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import KNNImputer
label_encoder = LabelEncoder()
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier

df=pd.read_csv('/content/winequality-red.csv')

df.head(10)

df.shape
df.info()
df.isnull().sum()
df.isnull().sum()/df.shape[0]*100

df.duplicated().sum()

for i in df.select_dtypes(include=['float64','int64']).columns:
  sns.histplot(df[i])
  plt.title(f'Histogram of {i}')
  plt.xlabel(i)
  plt.ylabel('Frequency')
  plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

corr = df.select_dtypes(include=['float64','int64']).corr()
plt.figure(figsize=(20,12))
sns.heatmap(corr,annot=True,cmap='Greens')
plt.show()

for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len("pH")):
    for j in range(i + 1, len("pH")):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x='density'[i], y='quality'[j])
        plt.title(f'Scatter Plot between {"density"[i]} and {"quality"[j]}')
        plt.show()

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

scaler = MinMaxScaler()
for column in df.select_dtypes(include=['float64','int64']):
    df[column] = scaler.fit_transform(df[[column]])

correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

impute=KNNImputer()
for i in df.select_dtypes(include='number').columns:
  df[i]=impute.fit_transform(df[[i]])

dupl=df.isnull().sum()
print(dupl)

df['quality'].value_counts()

df.drop(columns=['sulphates','alcohol','pH'])

df.info()

categorical_columns = df.select_dtypes(include=['object']).columns

for column in categorical_columns:
    print(f"Value counts for column '{column}':")
    print(df[column].value_counts())
    print()

for i in df.columns:
  if df[i].dtype==np.number:
    continue
  df[i]=label_encoder.fit_transform(df[i])

x=df.drop(columns=['residual sugar','chlorides','fixed acidity'])
x=StandardScaler().fit_transform(x)
y=df['quality']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

#train the model
model=KNeighborsClassifier(n_neighbors=3)
model.fit(x_train,y_train)

y_predict=model.predict(x_test)

accuracy_score(y_test,y_predict)